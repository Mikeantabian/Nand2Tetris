
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int size;
    field int maxSize;
    field Array str;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength = 0){
           let maxLength = 1;   
        }

        let str = Array.new(maxLength);
		let size = 0;
		let maxSize = maxLength;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Array.dispose(str);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return size;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(size < maxSize) {
            let str[size] = c;
            let size = size + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(size > 0) {
            let size = size -1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i;
        var int sum;
        var boolean negative;

        if (str[0] = 45 & (size > 0)) {
            let negative = true;
            let i=1
        } else {
            let negative = false;
            let i = 0;
        }

        while(i < size) {
            if (str[i] > 47 & str[i] < 58) { //the char is a digit between 0 to 9 in ascii
				let sum = (sum * 10) + (str[i] - 48);
			}
			let i = i + 1;
        }
        if(negative) {
            return -sum;
        } else {
            return sum;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let size = 0;
		if (number < 0) {
			let number = -number;
			do appendChar(45); //add leading '-'
		}
        do SetIntHelper(val);
        return;
    }

    method void SetIntHelper(int val) {
		var int mod;
		var int divider;

		let divider = val / 10;
		let mod = val - (div * 10);
		
		if (val < 10)
		{
			do appendChar(mod + 48);
		}
		else{
			do SetIntHelper(divider);
			do appendChar(mod + 48);
		}
		return;
			
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
