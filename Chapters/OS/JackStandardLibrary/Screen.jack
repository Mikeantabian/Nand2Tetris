
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;//true for black, false for white
	static Array screen;


    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;

        while (i < 8192) {
            let screen[i] = false;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address,mask;

        let address = (y * 32) + (x / 16);
        let mask = Math.twoToThe(x & 15);

        if(color){
            let screen[address] = screen[address] | mask;
        }else{
            let screen[address] = screen[address] & ~mask;
        }

        return;

    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, temp, adyMinusbdx;

        if(x1 > x2){
            let temp = x1;
            let x1 = x2;
            let x2 = temp;

            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let adyMinusbdx = 0;

        if (dy = 0) {
            do Screen.drawHLine(x1,x2,y1);
        } else {
            if(dx = 0) {
                do Screen.drawVLine(y1,y2,x1);
            } else {
                if (y1 < y2) {
                    while(~(a > dx) & ~(b > dy)) {
                        do Screen.drawPixel(x1 + a, y1 + b);
                        if(adyMinusbdx > 0){
                            let a = a + 1;
                            let adyMinusbdx = adyMinusbdx - dx;
                        }else{
                            let b = b + 1;
                            let adyMinusbdx = adyMinusbdx + dy;
                        }
                    }
                } else { // y1 > y2
                    while(~(a > dx) & ~(b < dy)){
                        
                        do Screen.drawPixel(x1 + a, y1 - b);
                        
                        if(adyMinusbdx > 0){
                            let a = a + 1;
                            let adyMinusbdx = adyMinusbdx - dx;
                        }else{
                            let b = b + 1;
                            let adyMinusbdx = adyMinusbdx + dy;
                        }

                    }
                }
            }
        }
        return;
    }

    function void drawHLine(int x1, int x2, int y) {
        var int temp;

        if(x1 > x2){
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }
        
        while(~(x1 > x2)) {
            do Screen.drawPixel(x1,y);
            let x1 = x1 + 1;
        }
        return;
    }

    function void drawVLine(int y1, int y2, int x) {
        var int temp;
        
        if(y1 > y2) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        while(~(y1 > y2)) {
            do Screen.drawPixel(x,y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while(~(y1 > y2)) {
            do Screen.drawHLine(x1,x2,y1);
            let y1 = y1+ 1;
        }
        return
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int equation;

        let dy = -r;
        let r_square = r*r;

        while(~(dy > r)) {
            let equation = Math.sqrt(r_square-(dy*dy));
            do Screen.drawHLine(x-equation,x+equation,y+dy);
            let dy = dy + 1;
        }
        return;
    }
}
