// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //making variable names for all control bits and also making instruction 0 in case of A-type instruction
    Mux16(a=false, b=instruction, sel=instruction[15],
     out[15]=cType, out[12]=cAorM , out[11]=cZX , out[10]=cNX , out[9]=cZY , out[8]=cNY , out[7]=cF ,
     out[6]=cNO , out[5]=destA , out[4]=destD , out[3]=destM, out[3]=writeM , out[2]=cJLT , 
     out[1]=cJEQ , out[0]=cJGT );

    Mux16(a=instruction, b=outALU, sel=cType, out=InType);//A or C type instruction
    Mux16(a=outA, b=inM, sel=cAorM, out=AorM);//to pick between A or M

    Not(in=cType, out=notType);//inverting type of instruction
    Or(a=notType, b=destA, out=loadA);//will load A if either dest is A or C-type instruction

    ARegister(in=InType, load=loadA, out=outA, out[0..14]= addressM);
    DRegister(in=outALU, load=destD, out=outD);


    ALU(x=outD, y=AorM, zx=cZX, nx=cNX, zy=cZY,
     ny=cNY, f=cF, no=cNO, out=outM,out=outALU, zr=zero, ng=neg);
    
    Not(in=zero, out=notZero); Not(in=neg, out=notNeg); And(a=notNeg, b=notZero, out=outGT);//inverting ng and zr for the JGT condition
    //verifying if the jump conditions are satisfied
    And(a=cJLT, b=neg, out=oJLT); // less than 0; < 0
    And(a=cJEQ, b=zero, out=oJEQ); // equal to 0; = 0
    And(a=cJGT, b=outGT, out=oJGT); // greater than 0; > 0
    Or(a=oJLT, b=oJEQ, out=temp); // one or more conditions can be satisfied at the same time, e.g. JGE(>=0)
    Or(a=oJGT, b=temp, out=oJMP);
    PC(in=outA, load=oJMP, inc=true, reset=reset, out[0..14]=pc, out[15] = false);

}